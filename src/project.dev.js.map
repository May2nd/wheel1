{"version":3,"sources":["assets/Game.js","assets/LuckyWheel.js","assets/WheelGraphics.js"],"names":["cc","Class","extends","Component","properties","wheel","require","label","Label","labelFrame","est","frame","start","this","updateEST","onBtnStart","value","Math","random","startRotate","string","update","dt","onChangeIncAcc","eb","v","max","parseInt","incAcc","onChangeDecAcc","decAcc","onChangeMaxSpeed","maxSpeed","_wheel$getEST","getEST","min","toFixed","STATE","STOP","START","FLOAT","SLOW","startAngle","angleCount","direction","default","type","Enum","1","-1","result","_angleResult","_state","_acc","_speed","_slowTime","_toStopTime","_direction","_lastAngle","node","angle","setupAngleResult","roundAngle","i","arguments","length","undefined","_time","console","log","updateSpeed","updatePositionBySpeed","slowDown","updatePositionSlow","t","stopDistance","abs","distance","distanceBetween2Angle","startSlowAngle","floatTimeExtend","end","updatePositionOnSlow","t0","t1","t2","COLOR","Color","arcCount","radius","g","getComponent","Graphics","moveTo","arcAngle","PI","fillColor","angle0","angle1","arc","x0","cos","y0","sin","x1","y1","lineTo","close","fill","Node","parent","setPosition","addComponent"],"mappings":"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","sourcesContent":["\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        wheel: require('LuckyWheel'),\n        label: cc.Label,\n        labelFrame: cc.Label,\n        est: cc.Label,\n        frame: 0\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.updateEST();\n    },\n\n    onBtnStart() {\n        const value = Math.random() * 8 | 0;\n        this.wheel.startRotate(value);\n        this.label.string = value + 1;\n    },\n\n    update (dt) {\n        // ++this.frame;\n        // this.labelFrame.string = this.frame;\n    },\n\n    onChangeIncAcc(value, eb) {\n        const v = Math.max(1, parseInt(value) || 1);\n        eb.string = v;\n        this.wheel.incAcc = v;\n        this.updateEST();\n    },\n\n    onChangeDecAcc(value, eb) {\n        const v = Math.max(1, parseInt(value) || 1);\n        eb.string = v;\n        this.wheel.decAcc = v;\n        this.updateEST();\n    },\n\n    onChangeMaxSpeed(value, eb) {\n        const v = Math.max(1, parseInt(value) || 1);\n        eb.string = v;\n        this.wheel.maxSpeed = v;\n        this.updateEST();\n    },\n\n    updateEST() {\n        const {min, max} = this.wheel.getEST();\n        this.est.string = min.toFixed(2) + '~' + max.toFixed(2);\n    }\n});\n","\nconst STATE = {\n    STOP: 0,\n    START: 1,\n    FLOAT: 2,\n    SLOW: 3,\n}\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        startAngle: 231,\n        angleCount: 8,\n        direction: {\n            default: 1,\n            type: cc.Enum({\"1\": 1, \"-1\": 2}),\n        },\n        incAcc: 200,\n        decAcc: 200,\n        maxSpeed: 360,\n        result: 5,\n        _angleResult: [],\n        _state: 0,\n        _acc: 0,\n        _speed: 0,\n        _slowTime: 0,\n        _toStopTime: 0,\n        _direction: 1,\n        _lastAngle: 0\n    }, \n\n    start () {\n        this.node.angle = this.startAngle;\n        if (this.direction == 2) this._direction = -1;\n        this.setupAngleResult();\n    },\n\n    roundAngle(angle) {\n        if (angle > 180) angle -= 360;\n        if (angle < -180) angle += 360;\n        angle = (angle * 100 | 0) / 100;\n        return angle;\n    },\n\n    setupAngleResult() {\n        const angle = 360 / this.angleCount;\n        for (let i = 0; i < this.angleCount; ++i) {\n            this._angleResult[i] = this.roundAngle(this.startAngle - i * angle);\n        }\n    },\n\n    startRotate(value = 4) {\n        this._state = STATE.START;\n        this._acc = this.incAcc;\n        this._speed = 0;\n        this._time = 0;\n        this.result = value;\n        console.log(\"=================START\");\n    },\n\n    update(dt) {\n        this._time += dt;\n        switch (this._state) {\n            case STATE.START:\n                this.updateSpeed(dt);\n                this.updatePositionBySpeed(dt);\n                break;\n            case STATE.FLOAT:\n                this.updatePositionBySpeed(dt);\n                if (this.result >= 0) {\n                    this.slowDown();\n                }\n                break;\n            case STATE.SLOW:\n                this.updatePositionSlow(dt);\n                break;\n            default:\n        }\n        this._lastAngle = this.node.angle;\n    },\n\n    slowDown() {\n        this._state = STATE.SLOW;\n        this._slowTime = 0;\n        this._acc = - this._direction * this.decAcc;\n        // v = v0 + a * t;\n        const t = - this._speed / this._acc; \n        this._toStopTime = t;\n        // s = v0 * t + 0.5 * a * t * t;\n        const stopDistance = Math.abs(this._speed * t + 0.5 * this._acc * t * t);\n        let distance = this.distanceBetween2Angle(this.node.angle, this._angleResult[this.result]);\n        while (distance < stopDistance) {\n            distance += 360;\n        }\n        this.startSlowAngle = this.roundAngle(this.node.angle + (distance - stopDistance) * this._direction);\n        this.floatTimeExtend = (distance - stopDistance) / this._speed * this._direction;\n    },\n\n    distanceBetween2Angle(start, end) {\n        if (start < 0) start += 360;\n        if (end < 0) end += 360;\n        let angle = (end - start) * this._direction;\n        if (angle < 0) {\n            angle += 360;\n        }\n        return angle;\n    },\n\n    updateSpeed(dt) {\n        this._speed += this._direction * this._acc * dt;\n        if (this._direction * this._speed >= this.maxSpeed) {\n            this._speed = this.maxSpeed * this._direction;\n            this._state = STATE.FLOAT;\n        }\n    },\n\n    updatePositionBySpeed(dt) {\n        this.node.angle = this.roundAngle(this.node.angle + this._speed * dt);\n    },\n\n    updatePositionSlow(dt) {\n        if (this.floatTimeExtend > 0) {\n            if (this.floatTimeExtend - dt > 0) {\n                this.updatePositionBySpeed(dt);\n                this.floatTimeExtend -= dt;\n            } else {\n                this._slowTime = dt - this.floatTimeExtend;\n                this.floatTimeExtend = 0;\n                this.updatePositionOnSlow();\n            }\n        } else {\n            this._slowTime += dt;\n            if (this._slowTime >= this._toStopTime) {\n                this._slowTime = this._toStopTime;\n                this._state = STATE.STOP;\n                cc.log(this._time);\n            }\n            this.updatePositionOnSlow();\n        }\n    },\n\n    updatePositionOnSlow() {\n        this.node.angle = this.roundAngle(this.startSlowAngle + \n            this._speed * this._slowTime + \n            0.5 * this._acc * this._slowTime * this._slowTime);  \n    },\n\n    getEST() {\n        const t0 = this.maxSpeed / this.incAcc;\n        const t1 = this.maxSpeed / this.decAcc;\n        const t2 = 360 / this.maxSpeed;\n        console.log('------------------------------------');\n        console.log('Thời gian để đạt tốc độ tối đa: ' + t0);\n        console.log('Thời gian dừng: ' + t1);\n        console.log('Thời gian chênh lệch: ' + t2);\n        return { min: t0 + t1, max: t0 + t1 + t2 };\n    }\n});\n","\n\nconst COLOR = [new cc.Color(195, 46, 48, 255), new cc.Color(65, 104, 224, 255), new cc.Color(68, 150, 57, 255), new cc.Color(229, 180, 65, 255)]\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        arcCount: 8,\n        radius: 275,\n    },\n\n    start () {\n        const g = this.getComponent(cc.Graphics);\n        g.moveTo(0, 0);\n        const arcAngle = 2 * Math.PI / this.arcCount;\n        for (let i = 0; i < this.arcCount; ++i) {\n            g.fillColor = COLOR[i % COLOR.length];\n            const angle0 = arcAngle * i;\n            const angle1 = arcAngle * (i + 1);\n            g.arc(0, 0, this.radius, angle0, angle1, true);\n            const x0 = this.radius * Math.cos(angle0);\n            const y0 = this.radius * Math.sin(angle0);\n            const x1 = this.radius * Math.cos(angle1);\n            const y1 = this.radius * Math.sin(angle1);\n            g.moveTo(0, 0);\n            g.lineTo(x0, y0);\n            g.lineTo(x1, y1);\n            g.lineTo(0, 0);\n            g.close();\n            g.fill();\n            let label = new cc.Node();\n            label.parent = this.node;\n            label.setPosition((x0 + x1) / 3, (y0 + y1) / 3);\n            label.angle = (angle0 + angle1) / 2 * 180 / Math.PI - 90;\n            label = label.addComponent(cc.Label);\n            label.string = i + 1;\n        }\n    },\n});\n"],"sourceRoot":"/source/","file":"project.dev.js"}